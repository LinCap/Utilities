#!/bin/bash

o=.
s=nohup
p=1
t=1
a='-M'

######################  function defination  ########################
show_version()
{
        echo "version: 1.0"
        echo "updated date: 2017-07-10"
}

show_usage()
{
        echo -e "`printf %-16s "Usage: $0"`"
        echo -e "`printf %-16s ` [-h|--help] Print usage information and quit."
        echo -e "`printf %-16s ` [-v|--version] Print version information and quit."
        echo -e "`printf %-16s ` [-I|--in FILE] Input file containing a list of bam files. This argument is required."
        echo -e "`printf %-16s ` [-o|--out DIR] Output directory. Default: ${o}"
        echo -e "`printf %-16s ` [-s|--submit STR] Command for submitting a job, e.g., qsub, nohup. Default: ${s}"
        echo -e "`printf %-16s ` [-p|--parallels INT] Number of parallels. Default: ${p}"
        echo -e "`printf %-16s ` [-t|--threads INT] Number of threads. Default: ${t}"
        echo -e "`printf %-16s ` [-r|--reference STR] Reference for RSEM. This argument is required."
        echo -e "`printf %-16s ` [-a|--arguments STR] Arguments for RSEM. Default: ${a}"
}

getopt --test > /dev/null
if [[ $? -ne 4 ]]; then
    echo "Sorry, `getopt --test` failed in this environment."
    exit 1
fi

SHORT=hvI:o:s:p:t:r:a:
LONG=help,version,in:,out:,submit:,parallels:,threads:,reference:,arguments:

# -temporarily store output to be able to check for errors
# -activate advanced mode getopt quoting e.g. via “--options”
# -pass arguments only via   -- "$@"   to separate them correctly
PARSED=`getopt --options $SHORT --longoptions $LONG --name "$0" -- "$@"`
if [[ $? -ne 0 ]]; then
    # e.g. $? == 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi
# use eval with "$PARSED" to properly handle the quoting
eval set -- "$PARSED"

# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
        -h|--help)
            show_usage; exit 0
            ;;
        -v|-V|--version)
            show_version; exit 0
            ;;
        -I|--in)
            I="$2"
            shift 2
            ;;
        -o|--out)
            o="$2"
            shift 2
            ;;
        -s|--submit)
            s="$2"
            shift 2
            ;;
        -p|--parallels)
            p="$2"
            shift 2
            ;;
        -t|--threads)
            t="$2"
            shift 2
            ;;
        -r|--reference)
            r="$2"
            shift 2
            ;;
        -a|--arguments)
            a="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit 3
            ;;
    esac
done

# Main
o=${o/%\//} # remove the last '/', if exist
mkdir -p ${o}

cat ${I} | while read i;do
    ((n=n%${p})); ((n++==0)) && wait
    f=`echo ${i} | awk '{print $NF}' | sed 's#^.*/##;s#\.[^.]*$##;s#\.fastq.*$##;s#\.fq.*$##'`
    R='"@RG\tID:0\tSM:${f}\tPL:Illumina\tCN:EXTERNAL\tPU:${f}\tLB:${f}"'
    mkdir -p ${o}/${f}
    bwa &> ${o}/${f}/version.log
    echo '#!/bin/sh' > ${o}/${f}/run.sh
    echo "bwa mem ${a} -R ${R} -t ${t} ${r} ${i} > ${o}/${f}/bwa_mem.sam" >> ${o}/${f}/run.sh
    chmod 755 ${o}/${f}/run.sh
    if [ ${s} = "nohup" ] ; then
        nohup ${o}/${f}/run.sh 1> ${o}/${f}/stdout.log 2> ${o}/${f}/stderr.log &
    elif [ ${s} = "qsub" ] ; then
        qsub -V -cwd -o ${o}/${f}/stdout.log -e ${o}/${f}/stderr.log ${o}/${f}/run.sh
    fi
done

### THE END ###
